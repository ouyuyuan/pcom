
! Description: global arrays
!
!      Author: OU Yuyuan <ouyuyuan@lasg.iap.ac.cn>
!     Created: 2015-09-26 15:40:39 BJT
! Last Change: 2015-10-29 20:13:58 BJT

module mod_arrays

  ! imported variables !{{{1
  use mod_kind, only: wp

  use mod_param, only: &
    nm, &
    ni, nj, nk, glo_ni, glo_nj, glo_nk, &
    np, &
    myid, mid

  use mod_type, only: type_vector

  implicit none
  public

  ! to be exported variables !{{{1
  ! grid information !{{{2
  type (type_vector), allocatable, dimension(:,:) :: &
    pubt, & ! tendency of ub, (p ub)/(p t)
    ub ! barotropic velocity

  ! metric properties
  type :: type_metric 
    real (kind=wp) :: h1, h2     ! Lame coefficients
    real (kind=wp) :: dx1, dx2   ! distance increaments
    ! Jacobian of the metric tensor, h1*h2*h3, sqrt(g), 
    !   where g is the determient of the metric tensor
    real (kind=wp) :: j 
  end type type_metric
  type (type_metric), allocatable, dimension(:,:) :: &
    mg1, mg3, mg4, mg2 ! metrics for grid 1/2/3/4

  ! grid info. in the vertical direction
  type :: type_gv
    real (kind=wp) :: x3 ! vertical coordinate
    real (kind=wp) :: z  ! geometry height
  end type type_gv
  type (type_gv), allocatable, dimension(:) :: &
    gvw, & ! vertical velocity grid
    gvu    ! horizontal velocity grid

  ! other !{{{2
  ! for previous and current time step variables
  type :: type_memo
    real (kind=wp) :: p, c ! previous/current values
  end type type_memo
  ! , g3-grid, bottom pressure normalized by initial pressure
  type (type_memo), allocatable, dimension(:,:) :: s 

  real (kind=wp), allocatable, dimension(:,:,:) :: &
    am ! , g3-grid, horizontal momentum viscosity coefficient

  real (kind=wp), allocatable, dimension(:,:) :: &
    ams, & ! surface horizontal viscosity
    phu, & ! , initial sea bottom pressure, ijkh-grid
    ph   ! ,                         ..., ihjhkh-grid

  real (kind=wp), allocatable, dimension(:) :: &
    glo_lon, & ! degree, ih-grid, global longitude
    glo_lat, & !     ... jh-grid,    ... latitude
    glo_z      ! m, k-grid, global depths of each layer

  integer, allocatable, dimension(:,:) :: &
    iun, & ! , g3-grid, water layers
    itn    ! , g1-grid, water layers

contains !{{{1

subroutine chk( ista ) !{{{1
  ! check state of allocate array 

  integer, intent(in) ::  ista

  if ( ista /= 0 ) then
    write(*,*) 'Allocate array failed. Stop'
    stop 2
  end if
end subroutine chk

end module mod_arrays!{{{1
!-------------------------------------------------------{{{1
! vim:fdm=marker:fdl=0:
! vim:foldtext=getline(v\:foldstart).'...'.(v\:foldend-v\:foldstart):
